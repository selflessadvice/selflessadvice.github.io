// Selfless Advice - Database Schema
// A comprehensive schema for a life advice and wisdom sharing platform

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  username      String?   @unique
  image         String?
  role          UserRole  @default(USER)
  
  // Auth fields
  emailVerified DateTime?
  hashedPassword String?
  
  // Profile fields
  bio           String?
  website       String?
  location      String?
  joinedAt      DateTime  @default(now())
  lastActive    DateTime  @default(now())
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  comments      Comment[]
  likes         Like[]
  donations     Donation[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core content models
model Article {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  excerpt         String?
  content         String      @db.Text
  featuredImage   String?
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  
  // Status and visibility
  status          ArticleStatus @default(DRAFT)
  featured        Boolean       @default(false)
  
  // Reading metrics
  readTime        Int?          // Estimated reading time in minutes
  views           Int           @default(0)
  
  // Author info
  authorId        String
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Publishing dates
  publishedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  tags            ArticleTag[]
  comments        Comment[]
  likes           Like[]
  
  @@map("articles")
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?      // Hex color for UI display
  
  // Metrics
  articleCount Int         @default(0)
  
  // Relations
  articles    ArticleTag[]
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("tags")
}

// Junction table for articles and tags (many-to-many)
model ArticleTag {
  articleId String
  tagId     String
  
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  
  // Relations
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Nested comments (replies)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Moderation
  approved  Boolean  @default(false)
  flagged   Boolean  @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@unique([userId, articleId])
  @@map("likes")
}

// Payment and donation models
model Donation {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  
  // Stripe integration
  stripePaymentId String?       @unique
  stripeSessionId String?       @unique
  
  // Donor information
  donorEmail      String?
  donorName       String?
  message         String?       @db.Text
  anonymous       Boolean       @default(false)
  
  // User relation (optional for anonymous donations)
  userId          String?
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Payment status
  status          PaymentStatus @default(PENDING)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("donations")
}

// Configuration and settings
model SiteSettings {
  id                String   @id @default("site")
  siteName          String   @default("Selfless Advice")
  siteDescription   String?
  siteUrl           String?
  
  // Social links
  socialTwitter     String?
  socialFacebook    String?
  socialInstagram   String?
  socialLinkedin    String?
  
  // SEO settings
  defaultMetaTitle  String?
  defaultMetaDesc   String?
  
  // Email settings
  contactEmail      String?
  
  // Features
  enableComments    Boolean  @default(true)
  enableDonations   Boolean  @default(true)
  enableNewsletter  Boolean  @default(true)
  
  // Timestamps
  updatedAt         DateTime @updatedAt
  
  @@map("site_settings")
}

// Analytics and tracking
model PageView {
  id        String   @id @default(cuid())
  path      String
  userAgent String?
  ipAddress String?
  
  // Relations (optional)
  articleId String?
  userId    String?
  
  // Timestamps
  viewedAt  DateTime @default(now())
  
  @@map("page_views")
}

// Enums
enum UserRole {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}
